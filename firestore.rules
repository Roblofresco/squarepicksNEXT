rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- helpers ---
    function signedIn() { return request.auth != null; }
    function ownerUserPath() {
      return path("/databases/$(database)/documents/users/$(request.auth.uid)");
    }
    // Backward-compatible owner check for userID stored as uid/string/map/ref
    function isSquareOwner() {
      return signedIn() && (
        resource.data.userID == request.auth.uid ||
        (resource.data.userID is string && (
          resource.data.userID == request.auth.uid ||
          resource.data.userID == ('users/' + request.auth.uid)
        )) ||
        (resource.data.userID is map && resource.data.userID.id == request.auth.uid) ||
        (resource.data.userID is path && resource.data.userID == ownerUserPath())
      );
    }
    function boardIsOpen(boardId) {
      let boardDoc = get(/databases/$(database)/documents/boards/$(boardId));
      return boardDoc != null && boardDoc.data.status == "open";
    }

    // --- users Collection ---
    match /users/{userId} {
      allow create: if signedIn() && request.auth.uid == userId;
      allow read, update: if signedIn() && request.auth.uid == userId;
      allow delete: if false;

      match /address/{document} { allow read, create, update, delete: if signedIn() && request.auth.uid == userId; }
      match /bets/{document}    { allow read, create, update, delete: if signedIn() && request.auth.uid == userId; }
      match /wallet/{document}  { allow read, create, update, delete: if signedIn() && request.auth.uid == userId; }
      match /wins/{winId}       { allow read: if signedIn() && request.auth.uid == userId; allow create, update, delete: if false; }
      match /fcmTokens/{tokenId} {
        // FCM tokens for push notifications - Cloud Functions manage, users can delete
        allow read, create, delete: if signedIn() && request.auth.uid == userId;
        allow update: if false;
      }
    }

    // --- games / sports / teams (public read) ---
    match /games/{gameDocId}   { allow read: if true; allow create, update, delete: if false; }
    match /sports/{sportDocId} { allow read: if true; allow create, update, delete: if false; }
    match /teams/{teamDocId}   { allow read: if true; allow create, update, delete: if false; }

    // --- boards Collection ---
    match /boards/{boardId} {
      // Boards visible if open (public), or to any signed-in user, or to service accounts
      allow read: if resource.data.status == "open" || signedIn() || request.auth.token.admin == true;
      allow create: if signedIn();
      allow update, delete: if false;

      // NOTE: Squares subcollection rules below kept for reference but not used
      // Actual implementation uses top-level /squares collection
      // TODO: Consider migration to subcollection for better data locality
      match /squares/{squareId} {
        // Publicly readable while board is open (for grid rendering)
        // Otherwise only the square owner can read, or service accounts
        allow read: if boardIsOpen(boardId) || isSquareOwner() || request.auth.token.admin == true;
        allow create, update, delete: if false;
      }

      match /winners/{periodId} {
        allow read: if true; allow create, update, delete: if false;
      }
    }

    // --- squares Collection (TOP-LEVEL) ---
    match /squares/{squareId} {
      // Squares are stored as top-level collection for better query performance
      // Owner can read their own squares, or if board is open (grid rendering)
      allow read: if signedIn() && (
        resource.data.userID == request.auth.uid ||
        (resource.data.userID is string && (
          resource.data.userID == request.auth.uid ||
          resource.data.userID == ('users/' + request.auth.uid)
        )) ||
        (resource.data.userID is map && resource.data.userID.id == request.auth.uid) ||
        (resource.data.userID is path && resource.data.userID == ownerUserPath())
      ) || (
        signedIn() && 
        resource.data.boardId is string && 
        boardIsOpen(resource.data.boardId)
      );
      allow create, update, delete: if false; // Cloud Functions only
    }

    // --- sweepstakes Collection ---
    match /sweepstakes/{sweepstakeDocId} {
      allow read: if true; allow create, update, delete: if false;

      match /participants/{participantId} {
        allow create: if signedIn() && request.resource.data.userID == request.auth.uid;
        allow read: if signedIn();
        allow update, delete: if false;
      }
    }

    // --- transactions Collection ---
    match /transactions/{transactionId} {
      allow read: if signedIn() && resource.data.userID == request.auth.uid;
      allow create, update, delete: if false;
    }

    // --- notifications Collection ---
    match /notifications/{notificationId} {
      allow read: if signedIn() && request.auth.uid == resource.data.userID;
      allow update: if signedIn() &&
                     request.auth.uid == resource.data.userID &&
                     request.writeFields.hasOnly(['isRead']) &&
                     request.resource.data.isRead == true;
      allow create, delete: if false;
    }
  }
}